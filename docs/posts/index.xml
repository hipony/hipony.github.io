
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
 <channel>
   <title>Posts on @Hipony</title>
   <link>https://hipony.github.io/posts/</link>
   <description>Recent content in Posts on @Hipony</description>
   <generator>Hugo -- gohugo.io</generator>
   <language>en-us</language>
   <copyright>Copyright Â© 2020 - Alexander Timofeev</copyright>
   <lastBuildDate>Fri, 20 Nov 2020 21:10:51 +0300</lastBuildDate>
   
       <atom:link href="https://hipony.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
   
   
     <item>
       <title>CMake 101</title>
       <link>https://hipony.github.io/posts/basic-cmake/</link>
       <pubDate>Fri, 20 Nov 2020 21:10:51 +0300</pubDate>
       
       <guid>https://hipony.github.io/posts/basic-cmake/</guid>
       <description>&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cmake&#34; data-lang=&#34;cmake&#34;&gt;add_executable(&lt;span style=&#34;color:#e6db74&#34;&gt;myapp&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;main.cpp&lt;/span&gt;)&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;CMake is an industry standard build-system for C++. If you want to make your library available on multiple platforms - it&amp;rsquo;s the best decision of a build system.&lt;/p&gt;
&lt;p&gt;Here we&amp;rsquo;ll look into basic instructions of how to write a build script for C++ in CMake.&lt;/p&gt;
&lt;h2 id=&#34;building-hello-world&#34;&gt;Building Hello World&lt;/h2&gt;</description>
     </item>
   
     <item>
       <title>Git 101</title>
       <link>https://hipony.github.io/posts/basic-git/</link>
       <pubDate>Fri, 20 Nov 2020 21:10:51 +0300</pubDate>
       
       <guid>https://hipony.github.io/posts/basic-git/</guid>
       <description>&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;% git commit -am &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Hello, World!&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Git is a version control system that everyone in the industry expects you to know. Although its interface is very counter-intuitive and confusing for beginners - the underlying model is fairly simple.&lt;/p&gt;
&lt;p&gt;So here we&amp;rsquo;ll look into basic Git commands which will be enough for you to go by in any project.&lt;/p&gt;
&lt;h2 id=&#34;requisites&#34;&gt;Requisites&lt;/h2&gt;
&lt;p&gt;I proceed further with an assumption that you already installed Git via whatever means are common on your system, would it be a system package manager or &lt;a href=&#34;https://git-scm.com/download/&#34;&gt;a direct download link&lt;/a&gt;, and that we&amp;rsquo;ll use a terminal to get a better feeling of Git commands.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;On Windows, Git comes with a shell executable which I suggest you to use.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;While there is a lot of graphical interfaces for Git and you could consider installing them later on - it&amp;rsquo;s always useful to be familiar with the command line. A lot of great tools come with only a command line interface and even for yourself - it&amp;rsquo;s much easier to just write a console application.&lt;/p&gt;
&lt;h2 id=&#34;help&#34;&gt;Help&lt;/h2&gt;
&lt;p&gt;We start from the most important command in any tool. The &lt;code&gt;--help&lt;/code&gt; command.&lt;/p&gt;
&lt;p&gt;When you forget how to work with Git you can always call the &lt;code&gt;git --help&lt;/code&gt; to see the list of all commands with a short description. To see a more verbose description for a specific command we can call &lt;code&gt;git &amp;lt;command&amp;gt; --help&lt;/code&gt;, for example - &lt;code&gt;git clone --help&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Be sure to remember about this command when you&amp;rsquo;re uncertain how something does work.&lt;/p&gt;
&lt;h2 id=&#34;creating-a-git-repository&#34;&gt;Creating a Git Repository&lt;/h2&gt;
&lt;p&gt;Great! We&amp;rsquo;re all set to start experimenting with Git. Let&amp;rsquo;s begin from creating a Git repository. For that, we&amp;rsquo;ll need a folder which we want to start to version control. It doesn&amp;rsquo;t matter how the folder is called because the identity of the project is stored in the embedded &lt;code&gt;.git&lt;/code&gt; folder.&lt;/p&gt;
&lt;h3 id=&#34;init&#34;&gt;Init&lt;/h3&gt;
&lt;p&gt;To start tracking a project we&amp;rsquo;ll use the &lt;code&gt;git init&lt;/code&gt; command &lt;em&gt;inside&lt;/em&gt; a folder. It&amp;rsquo;ll create an embedded &lt;code&gt;.git&lt;/code&gt; folder which will store all our version history.&lt;/p&gt;
&lt;p&gt;Here is an example of creating a folder and create a Git repository in it (I&amp;rsquo;m using the &lt;code&gt;%&lt;/code&gt; character to indicate the start of a command):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;% mkdir git-101 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; cd git-101 &lt;span style=&#34;color:#75715e&#34;&gt;# Create the folder&lt;/span&gt;
% git init                    &lt;span style=&#34;color:#75715e&#34;&gt;# Initialize Git repositroy&lt;/span&gt;
Initialized empty Git repository in .../git-101/.git/
% ls -a                       &lt;span style=&#34;color:#75715e&#34;&gt;# Check the folder contents&lt;/span&gt;
.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To remove Git from tracking the current folder - it&amp;rsquo;s enough to just remove the inner &lt;code&gt;.git&lt;/code&gt; folder. But be careful since it&amp;rsquo;ll remove all the history too.&lt;/p&gt;
&lt;h3 id=&#34;default-branch&#34;&gt;Default Branch&lt;/h3&gt;
&lt;p&gt;By default, Git will initialize a &lt;em&gt;branch&lt;/em&gt; called &lt;code&gt;master&lt;/code&gt;. Imagine if in a video game your save files would never get overriden, but preserve all previous save files in its slot and allow to to go back any time. And would allow to &lt;em&gt;branch&lt;/em&gt; out to different save files based on the choices you made in the game story.&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;ll talk more about branches a bit later.&lt;/p&gt;
&lt;p&gt;There are multiple different ways to change the name of the created by default branch.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Use the &lt;code&gt;-b &amp;lt;name&amp;gt;&lt;/code&gt; command line argument&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Configurate a global default branch name with: &lt;code&gt;git config --global init.defaultBranch &amp;lt;name&amp;gt;&lt;/code&gt;, we&amp;rsquo;ll talk about &lt;code&gt;git config&lt;/code&gt; a bit later.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For now, let&amp;rsquo;s try to change the branch name to &lt;code&gt;dev&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;% rm -rf .git     &lt;span style=&#34;color:#75715e&#34;&gt;# Delete a Git repository&lt;/span&gt;
% git init -b dev &lt;span style=&#34;color:#75715e&#34;&gt;# Create a Git repository with a `dev` default branch&lt;/span&gt;
Initialized empty Git repository in ../git-101/.git/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;tracking-files&#34;&gt;Tracking Files&lt;/h2&gt;
&lt;p&gt;In a Git repository each file can be in one of the two states: &lt;code&gt;tracked&lt;/code&gt; or &lt;code&gt;untracked&lt;/code&gt;. All files in a new repository are &lt;code&gt;untracked&lt;/code&gt; by default. Let&amp;rsquo;s see how to start tracking their versions.&lt;/p&gt;
&lt;h3 id=&#34;add&#34;&gt;Add&lt;/h3&gt;
&lt;p&gt;To check the state of our repository we can use the &lt;code&gt;git status&lt;/code&gt; command.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;% git status
On branch dev

No commits yet

nothing to commit &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;create/copy files and use &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;git add&amp;#34;&lt;/span&gt; to track&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;There is quite a lot of information! What we&amp;rsquo;re interested for now is the suggestion&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;create/copy files and use &amp;ldquo;git add&amp;rdquo; to track&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Since our directory is new and empty - there is nothing to track. Let&amp;rsquo;s try to create an empty text file and check again.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;% touch file.txt &lt;span style=&#34;color:#75715e&#34;&gt;# Create an empty file called `file.txt`&lt;/span&gt;
% git status
On branch dev

No commits yet

Untracked files:
  &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;use &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;git add &amp;lt;file&amp;gt;...&amp;#34;&lt;/span&gt; to include in what will be committed&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
        file.txt

nothing added to commit but untracked files present &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;use &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;git add&amp;#34;&lt;/span&gt; to track&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The suggestion has changed! We can check that our new &lt;code&gt;file.txt&lt;/code&gt; is &lt;code&gt;untracked&lt;/code&gt;. Add Git helpfully suggests to use the &lt;code&gt;git add&lt;/code&gt; command. Let&amp;rsquo;s try that and see what changes with &lt;code&gt;git status&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;% git add file.txt &lt;span style=&#34;color:#75715e&#34;&gt;# Start tracking the file&lt;/span&gt;
% git status
On branch dev

No commits yet

Changes to be committed:
  &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;use &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;git rm --cached &amp;lt;file&amp;gt;...&amp;#34;&lt;/span&gt; to unstage&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
        new file:   file.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now our file is &lt;code&gt;tracked&lt;/code&gt; and Git will follow any changes we make to this file. But Git will not keep the history of changes to the file unless we make a &amp;ldquo;save&amp;rdquo; which is called a &lt;em&gt;commit&lt;/em&gt; in Git terminology.&lt;/p&gt;
&lt;p&gt;Until we make a commit we can track and untrack files any number of times - it&amp;rsquo;ll not be reflected in the Git history. In case we added a file by accident - we can untrack the file by writing &lt;code&gt;git rm --cached &amp;lt;file&amp;gt;&lt;/code&gt; as suggested. Let&amp;rsquo;s do that:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;% git rm --cached file.txt &lt;span style=&#34;color:#75715e&#34;&gt;# Untrack the file&lt;/span&gt;
% git status
On branch dev

No commits yet

Untracked files:
  &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;use &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;git add &amp;lt;file&amp;gt;...&amp;#34;&lt;/span&gt; to include in what will be committed&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
        file.txt

nothing added to commit but untracked files present &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;use &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;git add&amp;#34;&lt;/span&gt; to track&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;config&#34;&gt;Config&lt;/h3&gt;
&lt;p&gt;Before we proceed to commiting, Git requires some configuration on your machine. To do that we will use the &lt;code&gt;git config&lt;/code&gt; command.&lt;/p&gt;
&lt;h4 id=&#34;your-identity&#34;&gt;Your Identity&lt;/h4&gt;
&lt;p&gt;You need to fill in your name and email which will be used to mark commit messages that you make so people will know from whom which commit came from. Git designed around multiple working on the same project at once!&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;% git config --global user.name &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;John Doe&amp;#34;&lt;/span&gt;
% git config --global user.email johndoe@example.com
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;your-editor&#34;&gt;Your Editor&lt;/h4&gt;
&lt;p&gt;By default, Git will pick up the system&amp;rsquo;s default editor and quite often it&amp;rsquo;s Vim.&lt;/p&gt;
&lt;p&gt;While quitting Vim is a very common joke among programmers because it&amp;rsquo;s an editor with character - there is very little to laugh at when you only want to learn a version control tool. Its shortcuts and workflows are vastly different from modern day editors and IDEs, so for many folks it could be a challenge to figure out how to even write a commit message.&lt;/p&gt;
&lt;p&gt;To change the editor to the one we&amp;rsquo;re accustomed with we can write these lines:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;% git config --global core.editor emacs
&lt;span style=&#34;color:#75715e&#34;&gt;# OR&lt;/span&gt;
% git config --global core.editor &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C:/Program Files/Notepad++/notepad++.exe&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt; that Git on Windows requires a full path to the editor&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;You can read more about &lt;code&gt;git config&lt;/code&gt; in the &lt;a href=&#34;https://git-scm.com/book/en/v2/Getting-Started-First-Time-Git-Setup&#34;&gt;Git Book&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;commit&#34;&gt;Commit&lt;/h3&gt;
&lt;p&gt;Let&amp;rsquo;s try to &amp;ldquo;save&amp;rdquo; our file in the Git history. When you enter the &lt;code&gt;git commit&lt;/code&gt; command - it&amp;rsquo;ll open the editor specified by your configuration to enter a &amp;ldquo;commit message&amp;rdquo;. There are different conventions on what to write in a commit message, but I suggest to use a present simple form starting from a verb. Let&amp;rsquo;s name our commit &amp;ldquo;Add file.txt&amp;rdquo;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;% gut add file.txt
% git commit
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;dev &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;root-commit&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; 5f518df&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Add file.txt
 &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; file changed, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; insertions&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;+&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; deletions&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;-&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
 create mode &lt;span style=&#34;color:#ae81ff&#34;&gt;100644&lt;/span&gt; file.txt
% git log
On branch dev
nothing to commit, working tree clean
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;log&#34;&gt;Log&lt;/h3&gt;
&lt;p&gt;And now &lt;code&gt;file.txt&lt;/code&gt; state is saved by git. It&amp;rsquo;s committed! You can observe the history of commits with the &lt;code&gt;git log&lt;/code&gt; command.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;% git log
&lt;span style=&#34;color:#75715e&#34;&gt;# In editor:&lt;/span&gt;
commit 5f518df3552f322fbf21534b7a8cbc64d638338e &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;HEAD -&amp;gt; dev&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
Author: Alexandr Timofeev &amp;lt;alexandr.p.timofeev@gmail.com&amp;gt;
Date:   Sun Nov &lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt; 20:18:54 &lt;span style=&#34;color:#ae81ff&#34;&gt;2020&lt;/span&gt; +0300

    Add file.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;Try out &lt;code&gt;git log --help&lt;/code&gt; to see additional arguments that you can pass!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Now let&amp;rsquo;s make a change in the file. For example we&amp;rsquo;ll write &lt;code&gt;Hello, World!&lt;/code&gt; in the file.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;% echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Hello, World!&amp;#39;&lt;/span&gt; &amp;gt; file.txt &lt;span style=&#34;color:#75715e&#34;&gt;# Write &amp;#39;Hello, World!&amp;#39; into the `file.txt`&lt;/span&gt;
% git status
On branch dev
Changes not staged &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; commit:
  &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;use &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;git add &amp;lt;file&amp;gt;...&amp;#34;&lt;/span&gt; to update what will be committed&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;use &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;git restore &amp;lt;file&amp;gt;...&amp;#34;&lt;/span&gt; to discard changes in working directory&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
        modified:   file.txt

no changes added to commit &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;use &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;git add&amp;#34;&lt;/span&gt; and/or &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;git commit -a&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;diff&#34;&gt;Diff&lt;/h3&gt;
&lt;p&gt;To inspect changes that we make we can use the &lt;code&gt;git diff&lt;/code&gt; command. You can specify &lt;code&gt;git diff &amp;lt;file&amp;gt;&lt;/code&gt; if you only want to see changes in specific files instead of all.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;% git diff
diff --git a/file.txt b/file.txt
index e69de29..8ab686e &lt;span style=&#34;color:#ae81ff&#34;&gt;100644&lt;/span&gt;
--- a/file.txt
+++ b/file.txt
@@ -0,0 +1 @@
+Hello, World!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;When we&amp;rsquo;re finished with the changes - we can make another commit. This time we&amp;rsquo;ll use a shorter version using command line arguments. The &lt;code&gt;a&lt;/code&gt; argument will add all &lt;code&gt;modified&lt;/code&gt; (not &lt;code&gt;new&lt;/code&gt;!) files to the commit and the &lt;code&gt;m&lt;/code&gt; argument will allow to write the commit message inline in the terminal instead of the editor.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;% git commit -am &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Hello, World!&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;dev 059f478&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Hello, World!
 &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; file changed, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; insertion&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;+&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
% git log
commit 059f47894ab061fe195f7302471902bdb7f178df &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;HEAD -&amp;gt; dev&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
Author: Alexandr Timofeev &amp;lt;alexandr.p.timofeev@gmail.com&amp;gt;
Date:   Sun Nov &lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt; 20:38:42 &lt;span style=&#34;color:#ae81ff&#34;&gt;2020&lt;/span&gt; +0300

    Hello, World!

commit 5f518df3552f322fbf21534b7a8cbc64d638338e
Author: Alexandr Timofeev &amp;lt;alexandr.p.timofeev@gmail.com&amp;gt;
Date:   Sun Nov &lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt; 20:18:54 &lt;span style=&#34;color:#ae81ff&#34;&gt;2020&lt;/span&gt; +0300

    Add file.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;branches&#34;&gt;Branches&lt;/h2&gt;
&lt;p&gt;Now let&amp;rsquo;s talk about &lt;em&gt;branches&lt;/em&gt;. Git is designed around distributed development process, allowing you to utilize its full power offline on your local machine. Even if you don&amp;rsquo;t need to share your work - Git is still extremely useful to keep track of working versions that you make, experimenting on side-features or returning back to the last working state.&lt;/p&gt;
&lt;p&gt;git branch
git checkout -b
git checkout file
git merge&lt;/p&gt;
&lt;h2 id=&#34;remote&#34;&gt;Remote&lt;/h2&gt;
&lt;p&gt;Alright, we&amp;rsquo;ve made some changes in our local Git repository. But how do we share it to cooperate with other developers?&lt;/p&gt;
&lt;p&gt;git remote
git push
git clone
git pull&lt;/p&gt;
&lt;h2 id=&#34;everything-else&#34;&gt;Everything Else&lt;/h2&gt;
&lt;p&gt;Here we conclude our short introduction of basic commands for Git. Git allows us to use a very vast variety of commands and command arguments, but a lot of them are useful only for very specific cases. Very often they&amp;rsquo;re implemented in terms of basic commands we introduced in here and most of the programmers out there prefer to not bother much and just do the job in a bit more verbose, maybe inefficient, way.&lt;/p&gt;
&lt;p&gt;If you wish to learn more about Git - consider starting from the &lt;a href=&#34;https://git-scm.com/book/en/v2&#34;&gt;Git Book&lt;/a&gt;.&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>Falsehoods C&#43;&#43; Programmers Believe About Standard Version Support</title>
       <link>https://hipony.github.io/posts/standard-support/</link>
       <pubDate>Sat, 24 Oct 2020 16:19:54 +0300</pubDate>
       
       <guid>https://hipony.github.io/posts/standard-support/</guid>
       <description>&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;oh_no&lt;/span&gt;() { &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; __cpluscplus; } &lt;span style=&#34;color:#75715e&#34;&gt;// Check GCC 4.6 and 4.7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;While being occasionally involved in the C++ package management process &lt;a href=&#34;https://github.com/conan-io/conan&#34;&gt;with Conan&lt;/a&gt; I see beginners and even experts alike being very confused about what does it mean to support a certain standard version in multi-platform libraries.&lt;/p&gt;
&lt;p&gt;Here I&amp;rsquo;ll point out some common misbelieves people have about standard version support.&lt;/p&gt;
&lt;h2 id=&#34;its-enough-to-know-which-standard-a-library-supports&#34;&gt;It&amp;rsquo;s enough to know which standard a library supports&lt;/h2&gt;
&lt;p&gt;Very often folks advertise their libraries as &amp;ldquo;A Very Cool C++17 Library!&amp;rdquo;. It&amp;rsquo;s okay to get a general idea of which features we &lt;em&gt;expect&lt;/em&gt; it to have, but it doesn&amp;rsquo;t help us when trying to consume it on arbitrary platforms.&lt;/p&gt;
&lt;p&gt;Take for example the &lt;a href=&#34;https://github.com/ericniebler/range-v3&#34;&gt;ranges-v3 library&lt;/a&gt;. In the description it says that it supports C++14/17/20, but in the minimal compiler version requirements it says:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Visual Studio 2019 (or later) on Windows, with some caveats due to range-v3&amp;rsquo;s strict conformance requirements: range-v3 needs /permissive- and either /std:c++latest or /std:c++17&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;We need information about the minimal compiler version support&lt;/strong&gt;.&lt;/p&gt;
&lt;h2 id=&#34;compilers-support-a-certain-standard&#34;&gt;Compilers support a certain standard&lt;/h2&gt;
&lt;p&gt;I often see beginners asking when a certain compiler will support C++XX when they hear that the next ISO standard is published. For people familiar with the C++ ecosystem this question doesn&amp;rsquo;t quit make sense. Compilers start to implement features even before the standard is finalized and may keep doing so for multiple versions forward, gradually releasing separate bits as they&amp;rsquo;re ready.&lt;/p&gt;
&lt;p&gt;Quite often some features are behind additional compiler flags such as the &lt;code&gt;/permissve-&lt;/code&gt; flag in MSVC (no alternative tokens without it!) or the &lt;code&gt;-lstdc++fs&lt;/code&gt; in GCC (to be able to use &lt;code&gt;std::filesystem&lt;/code&gt; pre GCC 10).&lt;/p&gt;
&lt;p&gt;Or some features may be in the &lt;code&gt;experimental&lt;/code&gt; namespace, which require quite non-trivial feature detection logic to depend on. In some cases, even if the header is present, &lt;a href=&#34;https://godbolt.org/z/eh76M6&#34;&gt;compilers will not allow to use such headers unless you pass correct flags&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;We need information about additional actions required to enable certain features. The standard flag is the most basic requirement for that&lt;/strong&gt;.&lt;/p&gt;
&lt;h2 id=&#34;library-supports-a-certain-standard&#34;&gt;Library supports a certain standard&lt;/h2&gt;
&lt;p&gt;As we understand at this point - to determine which standard version a library supports isn&amp;rsquo;t a trivial matter. More so to keep that support during development.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s a very common situation where certain compiler versions support future standards only partially. Take for example GCC 6.4 - it provides &lt;code&gt;experimental/filesystem&lt;/code&gt; and &lt;code&gt;experimental/optional&lt;/code&gt;, but not &lt;code&gt;experimental/variant&lt;/code&gt;. An author may decide to support this platform if the only thing they really need is a cross-platform filesystem implementation without external dependencies.&lt;/p&gt;
&lt;p&gt;The only compiler version that we can be sure of is the one used during development.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;We must test library against declared minimal compiler versions for each release to keep the support information up to date&lt;/strong&gt;.&lt;/p&gt;
&lt;h2 id=&#34;library-knows-which-compiler-version-it-needs&#34;&gt;Library knows which compiler version it needs&lt;/h2&gt;
&lt;p&gt;Big industry standard libraries such as &lt;a href=&#34;https://github.com/boostorg/asio/blob/develop/include/boost/asio/detail/config.hpp#L95&#34;&gt;Boost&lt;/a&gt; and &lt;a href=&#34;https://code.woboq.org/qt5/qtbase/src/corelib/global/qcompilerdetection.h.html&#34;&gt;Qt&lt;/a&gt; do a tremendous amount of work to correctly implement reliable cross-platform feature detection and conform to it.&lt;/p&gt;
&lt;p&gt;The issue is that it&amp;rsquo;s not enough to simply copy paste feature detection logic from big libraries, as a library author one must know where to apply the polyfil macro and it&amp;rsquo;s very tricky to do especially for smaller features.&lt;/p&gt;
&lt;p&gt;Sometimes authors do a shortcut (I don&amp;rsquo;t have a Mac, how can I know if my library supports it?) and simply check &lt;a href=&#34;https://en.cppreference.com/w/cpp/compiler_support&#34;&gt;public lists of supported features&lt;/a&gt;. But such lists tend to get outdated or contain not a full information, especially with respect to the library support.&lt;/p&gt;
&lt;p&gt;Until we build our library on a certain compiler version with a certain standard - we can&amp;rsquo;t be sure that our library supports that compiler version.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;We should not reject unknown compiler versions. It&amp;rsquo;s better to try to build and fail&lt;/strong&gt;.&lt;/p&gt;
&lt;h2 id=&#34;compilers-never-lie&#34;&gt;Compilers never lie&lt;/h2&gt;
&lt;p&gt;Well, not quite. They have &lt;em&gt;bugs&lt;/em&gt; instead. Or sometimes &lt;a href=&#34;https://godbolt.org/z/6PaK5T&#34;&gt;they&amp;rsquo;re not required to provide diagnostic&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;A common misconception is that we can ask a compiler nicely which feature it supports and everything will be &lt;em&gt;fine&lt;/em&gt;. But what if a certain version of a compiler doesn&amp;rsquo;t provide a list of known features? What if the information it provides isn&amp;rsquo;t &lt;em&gt;granular&lt;/em&gt; enough?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Did you know that CMake discourages the use of &lt;em&gt;granular&lt;/em&gt; &lt;code&gt;target_compile_features&lt;/code&gt; in favor of &amp;lsquo;meta&amp;rsquo; features such as &lt;code&gt;cxx_std_17&lt;/code&gt;?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;The only reliable way to detect standard feature support is to try to compile the code itself and run its tests&lt;/strong&gt;.&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;We need information about the minimal compiler version support&lt;/li&gt;
&lt;li&gt;We need information about additional actions required to enable certain features. The standard flag is the most basic requirement for that&lt;/li&gt;
&lt;li&gt;We must test library against declared minimal compiler versions for each release to keep the support information up to date&lt;/li&gt;
&lt;li&gt;We should not reject unknown compiler versions. It&amp;rsquo;s better to try to build and fail&lt;/li&gt;
&lt;li&gt;The only reliable way to detect standard feature support is to try to compile the code itself and run its tests&lt;/li&gt;
&lt;/ul&gt;</description>
     </item>
   
 </channel>
</rss>
